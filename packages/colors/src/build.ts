/**
 * Copyright IBM Corp. 2018, 2018
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

const { reporter } = require('@carbon/cli-reporter');
const fs = require('fs-extra');
const path = require('path');
const prettier = require('prettier');

import { colors, tokens } from './index';

const SCSS_DIR = path.resolve(__dirname, '../scss');
const SCSS_ENTRYPOINT = path.join(SCSS_DIR, 'colors.scss');
const TOKEN_ENTRYPOINT = path.join(SCSS_DIR, 'tokens.scss');
const GENERATED_COMMENT = `// Code generated by @carbon/colors. DO NOT EDIT.`;
const PREFIX = 'ibm';
const prettierOptions = {
  parser: 'scss',
  printWidth: 80,
  singleQuote: true,
};

async function build(x: () => void) {
  reporter.info('Building scss files for colors and tokens...');

  reporter.info('Cleaning up build directory...');
  await fs.remove(SCSS_DIR);

  reporter.info('Building scss file for colors...');

  const colorsByValue: { [value: string]: string } = {};

  const colorsSource = Object.entries(colors).reduce((acc, color) => {
    const [colorName, definitions] = color;
    Object.entries(definitions).forEach(([grade, value]) => {
      const parts = getPartsFromKey(colorName);
      const name = parts.join('-');
      const variableName = `$${PREFIX}-colors__${name}--${grade}`;
      colorsByValue[value] = variableName;
      acc += `\n${variableName}: ${value};`;
    });
    return acc;
  }, '');

  await fs.ensureDir(SCSS_DIR);
  await fs.writeFile(
    SCSS_ENTRYPOINT,
    prettier.format(GENERATED_COMMENT + '\n' + colorsSource, prettierOptions)
  );

  reporter.info('Building scss file for tokens...');
  const tokenSource = Object.entries(tokens).reduce(
    (acc, [tokenName, tokenValue]) => {
      const parts = getPartsFromKey(tokenName);
      const name = parts.join('-');

      if (colorsByValue[tokenValue]) {
        return acc + `\n$${name}: ${colorsByValue[tokenValue]};`;
      }

      return acc + `\n$${tokenName}: ${tokenValue};`;
    },
    ''
  );

  const COLOR_IMPORT = `@import 'colors';`;

  await fs.writeFile(
    TOKEN_ENTRYPOINT,
    prettier.format(
      GENERATED_COMMENT + '\n' + COLOR_IMPORT + '\n' + tokenSource,
      prettierOptions
    )
  );

  reporter.success('Done! ðŸŽ‰');
}

function getPartsFromKey(key: string) {
  const parts = key.match(/([a-z]+)|([A-Z][a-z]+)|([0-9]{1,3})/g) || [];
  return parts.map(part => part.toLowerCase());
}

module.exports = build;
